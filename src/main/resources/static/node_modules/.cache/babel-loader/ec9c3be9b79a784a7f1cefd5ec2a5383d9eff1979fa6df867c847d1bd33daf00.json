{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\eclipse-workspace\\\\my-react-app E\\\\src\\\\components\\\\TrackOrder.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrackOrder = ({\n  progress\n}) => {\n  const steps = [33, 66, 100];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-12 bg-gray-900 text-white rounded-lg shadow-lg max-w-3xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl font-bold mb-8\",\n      children: \"Track Your Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-700 rounded-full flex justify-between mb-8 h-12\",\n      children: steps.map((step, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `w-12 h-12 rounded-full flex items-center justify-center ${progress >= step ? 'bg-green-500' : 'bg-yellow-300'}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-white font-bold\",\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full bg-gray-700 rounded-full h-10\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-500 h-10 rounded-full transition-all duration-300\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n};\n_c = TrackOrder;\nconst App = () => {\n  _s();\n  const [progress, setProgress] = useState(0);\n\n  // Fetch progress data from an API or external source\n  useEffect(() => {\n    const fetchProgress = async () => {\n      try {\n        // Replace this with your API call\n        const response = await fetch('https://api.example.com/progress');\n        const data = await response.json();\n        setProgress(data.progress);\n      } catch (error) {\n        console.error('Failed to fetch progress data', error);\n      }\n    };\n    fetchProgress();\n  }, []); // Only run once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center min-h-screen bg-gray-900\",\n    children: /*#__PURE__*/_jsxDEV(TrackOrder, {\n      progress: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"ZVQpwjU6Dz5R8VBOzPsnxGRmMVo=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"TrackOrder\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TrackOrder","progress","steps","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","step","index","style","width","_c","App","_s","setProgress","fetchProgress","response","fetch","data","json","error","console","_c2","$RefreshReg$"],"sources":["C:/Users/HP/eclipse-workspace/my-react-app E/src/components/TrackOrder.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst TrackOrder = ({ progress }) => {\r\n    const steps = [33, 66, 100];\r\n\r\n    return (\r\n        <div className=\"p-12 bg-gray-900 text-white rounded-lg shadow-lg max-w-3xl mx-auto\">\r\n            <h1 className=\"text-3xl font-bold mb-8\">Track Your Order</h1>\r\n            <div className=\"w-full bg-gray-700 rounded-full flex justify-between mb-8 h-12\">\r\n                {steps.map((step, index) => (\r\n                    <div\r\n                        key={index}\r\n                        className={`w-12 h-12 rounded-full flex items-center justify-center ${\r\n                            progress >= step ? 'bg-green-500' : 'bg-yellow-300'\r\n                        }`}\r\n                    >\r\n                        <span className=\"text-white font-bold\">{index + 1}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"w-full bg-gray-700 rounded-full h-10\">\r\n                <div\r\n                    className=\"bg-green-500 h-10 rounded-full transition-all duration-300\"\r\n                    style={{ width: `${progress}%` }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst App = () => {\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    // Fetch progress data from an API or external source\r\n    useEffect(() => {\r\n        const fetchProgress = async () => {\r\n            try {\r\n                // Replace this with your API call\r\n                const response = await fetch('https://api.example.com/progress');\r\n                const data = await response.json();\r\n                setProgress(data.progress);\r\n            } catch (error) {\r\n                console.error('Failed to fetch progress data', error);\r\n            }\r\n        };\r\n\r\n        fetchProgress();\r\n    }, []); // Only run once when the component mounts\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-900\">\r\n            <TrackOrder progress={progress} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACjC,MAAMC,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC;EAE3B,oBACIH,OAAA;IAAKI,SAAS,EAAC,oEAAoE;IAAAC,QAAA,gBAC/EL,OAAA;MAAII,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC7DT,OAAA;MAAKI,SAAS,EAAC,gEAAgE;MAAAC,QAAA,EAC1EF,KAAK,CAACO,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACnBZ,OAAA;QAEII,SAAS,EAAE,2DACPF,QAAQ,IAAIS,IAAI,GAAG,cAAc,GAAG,eAAe,EACpD;QAAAN,QAAA,eAEHL,OAAA;UAAMI,SAAS,EAAC,sBAAsB;UAAAC,QAAA,EAAEO,KAAK,GAAG;QAAC;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC,GALpDG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMT,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNT,OAAA;MAAKI,SAAS,EAAC,sCAAsC;MAAAC,QAAA,eACjDL,OAAA;QACII,SAAS,EAAC,4DAA4D;QACtES,KAAK,EAAE;UAAEC,KAAK,EAAE,GAAGZ,QAAQ;QAAI;MAAE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACM,EAAA,GA1BId,UAAU;AA4BhB,MAAMe,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACf,QAAQ,EAAEgB,WAAW,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;;EAE3C;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMqB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;QAChE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCL,WAAW,CAACI,IAAI,CAACpB,QAAQ,CAAC;MAC9B,CAAC,CAAC,OAAOsB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACzD;IACJ,CAAC;IAEDL,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACInB,OAAA;IAAKI,SAAS,EAAC,oEAAoE;IAAAC,QAAA,eAC/EL,OAAA,CAACC,UAAU;MAACC,QAAQ,EAAEA;IAAS;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEd,CAAC;AAACQ,EAAA,CAxBID,GAAG;AAAAU,GAAA,GAAHV,GAAG;AA0BT,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAW,GAAA;AAAAC,YAAA,CAAAZ,EAAA;AAAAY,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}